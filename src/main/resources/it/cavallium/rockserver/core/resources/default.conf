database: {
  global: {
    # Keep false unless you have a legacy database
    enable-column-bug: false
    # Enable to adapt the database to spinning disk
    spinning: false
    # Error checking
    checksum: true
    # Use direct I/O in RocksDB databases (Higher I/O read throughput but OS cache is not used, less swapping, less memory pressure)
    use-direct-io: true
    # Allow memory mapped (mmap) RocksDB databases (High OS cache usage if direct I/O is not enabled)
    allow-rocksdb-memory-mapping: false
    # Maximum open files for each RocksDB database instance. -1 is infinite.
    # If the maximum open files count is -1, the initial startup time will be slower.
    # If "cacheIndexAndFilterBlocks" is false, the memory will rise when the number of open files rises.
    maximum-open-files: -1
    optimistic: true
    # Database block cache size
    block-cache: 512MiB
    # Database write buffer manager size
    # You should enable this option if you are using direct I/O or spinning disks
    write-buffer-manager: 64MiB
    # Log data path
    log-path: ./logs
    # Write-Ahead-Log data path
    wal-path: ./wal
    fallback-column-options: {
      # RocksDB data levels
      # Available compression types: PLAIN, SNAPPY, LZ4, LZ4_HC, ZSTD, ZLIB, BZLIB2
      levels: [
        {
          compression: LZ4
          max-dict-bytes: 0
        }
        {
          compression: LZ4
          max-dict-bytes: 0
        }
        {
          compression: ZSTD
          max-dict-bytes: 0
        }
        {
          compression: ZSTD
          max-dict-bytes: 0
        }
        {
          compression: ZSTD
          max-dict-bytes: 0
        }
        {
          compression: ZSTD
          max-dict-bytes: 0
        }
        {
          compression: ZSTD
          # Maximum compression dictionary bytes per-sst
          max-dict-bytes: 32KiB
        }
      ]
      # Memtable memory budget for RocksDB
      # Used to optimize compactions and avoid write stalls
      memtable-memory-budget-bytes: 128MiB
      # Disable to reduce IOWAIT and make the read/writes faster
      # Enable to reduce ram usage
      # If maximum-open-files is != -1, this option must be set to true,
      #  otherwise the indexes and filters will be unloaded often
      cache-index-and-filter-blocks: true
      # Disable to reduce IOWAIT and make the read/writes faster
      # Enable to reduce ram usage
      partition-filters: false
      # Bloom filter.
      bloom-filter: {
        # Bits per key. This will determine bloom memory size: bitsPerKey * totalKeys
        bits-per-key: 10
        # Disable bloom for the bottommost level, this reduces the memory size to 1/10
        optimize-for-hits: false
      }
      # Use relatively larger block sizes to reduce index block size.
      # You should use at least 64KB block size.
      # You can consider 256KB or even 512KB.
      # The downside of using large blocks is that RAM is wasted in the block cache.
      block-size: 16KiB
      # This should be kept to null if write-buffer-manager is set,
      # or if you want to use the "memtable-memory-budget-size" logic.
      # Remember that there are "max-write-buffer-number" in memory, 2 by default
      write-buffer-size: 200MiB
    }
    column-options: [
      ${database.global.fallback-column-options} {
        name: "default"
      }
    ]
  }
}
